#returns a probability of the given label
def get_prob_titanic(label, table, testRow):
    total1 = 0.0 #P(class|C)
    total2 = 0.0 #P(age|C)
    total3 = 0.0 #P(sex|C)
    totalAll = 0.0 #P(C)
    total = 0.0
    for row in table:
        if row[3] == label:
            total += 1.0
            totalAll += 1.0
            if (row[0] == testRow[0]): #class
                total1 += 1.0
            if row[1] == testRow[1]: #age
                total2 += 1.0
            if row[2] == testRow[2]: #sex
                total3 += 1.0

    if total != 0.0:
        total1 = total1 / total
        total2 = total2 / total
        total3 = total3 / total

    totalAll = totalAll / float(len(table))
    total = total1 * total2 * total3
    labelChance = total * totalAll
    return labelChance

def titanic_class(table):
    temporary = []
    for row in table:
        if row[3] == 'yes':
            temporary.append(float(1))
        else:
            temporary.append(float(0))
    return temporary

def NB_Stratfied_titanic(table):
    randomized = table[:]  # this will randomize the table we passed in
    n = len(table)
    for i in range(n):
        j = randint(0, n - 1)
        randomized[i], randomized[j] = randomized[j], randomized[i]  # changes all the positions of the item in the list

    temporary = titanic_class(randomized)

    k = 10
    empty = [[] for i in range(k)]  # the empty 10-folds
    count = 0

    for i in range(0, 2):
        for j in range(len(temporary)):
            if (temporary[j] == i):
                if count == 10:
                    count = 0
                empty[count].append(randomized[j])
                count += 1
    return empty

def NB_hw4_step_3(table):
    k = 3
    totalAcc = 0
    for i in range(0, k):
        TP = 0.0
        sets = NB_Stratfied_titanic(table)
        r = random.randint(10)
        training = []
        for j in range(0, len(sets)):
            if r != j:
                for row in sets[j]:
                    training.append(row)
        for item in sets[r]:
            probs = []
            probs.append(get_prob_titanic('yes', training, item))
            probs.append(get_prob_titanic('no', training, item))
            prediction = probs.index(max(probs))
            if prediction == 0:
                prediction = 'yes'
            else:
                prediction = 'no'
            realRank = item[3]
            if prediction == realRank:
                TP += 1.0
        accuracy = TP / len(sets[1]) * 1.0
        totalAcc += accuracy
    totalAcc = totalAcc / (k * 1.0)
    print('NB Titanic: accuracy: ' + str(totalAcc) + ', error rate: ' + str(1 - totalAcc))

def distance(row, instance):
    dist = 0
    if instance[0] != row[0]:
        dist += 1
    if instance[1] != row[1]:
        dist += 1
    if instance[2] != row[2]:
        dist += 1
    return dist

def get_top_k(distances, k):
    distances.sort(key=itemgetter(0))
    results = []
    for i in range(0, k):
        results.append(distances[i])
    return results

def select_class_label(rows):
    ranks = []
    for item in rows:
        ranks.append(item[1][3])
    m = Counter(ranks)
    mode = m.most_common(1)[0][0]
    return mode

def k_nn_classifier(training_set, n, instance, k):
    row_distances = []
    #This gets values for each column we will use so we can normalize the values individually
    for row in training_set:
        d = distance(row, instance)
        row_distances.append([d, row])
    top_k_rows = get_top_k(row_distances, k)
    label = select_class_label(top_k_rows)
    return label

def KNN_titanic(table):
    k = 3
    totalAcc = 0
    for i in range(0, k):
        TP = 0.0
        sets = NB_Stratfied_titanic(table)
        r = random.randint(10)
        training = []
        for j in range(0, len(sets)):
            if r != j:
                for row in sets[j]:
                    training.append(row)
        n = [0, 1, 2, 3]
        for item in sets[r]:
            prediction = k_nn_classifier(training, n, item, 3)
            realRank = item[3]
            if prediction == realRank:
                TP += 1.0
        accuracy = TP / len(sets[1]) * 1.0
        totalAcc += accuracy
    totalAcc = totalAcc / (k * 1.0)
    print('K nearest neighbor Titanic: accuracy: ' + str(totalAcc) + ', error rate: ' + str(1 - totalAcc))
