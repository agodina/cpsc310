def NB_Stratified(table):
    randomized = table[:]  # this will randomize the table we passed in 
    n = len(table)
    for i in range(n):
        j = randint(0, n - 1)
        randomized[i], randomized[j] = randomized[j], randomized[i]  # changes all the positions of the item in the list

    k = 10
    empty = [[] for i in range(k)]  # the empty 10-folds 
    count = 0
    temp = randomized
    vals = []
    for item in temp:
        vals.append(weight_class(item[4]))  # gets the class values of the weight 

    for i in range(1, 6):
        for j in range(len(vals)):
            if (vals[j] == i):
                if count == 10:
                    count = 0
                empty[count].append(temp[j])
                count += 1
    return empty


#FOR TITANIC DATA SET:

def titanic_class(table):
    temporary = []
    for row in table:
        if row[3] == 'yes':
            temporary.append(float(1))
        else:
            temporary.append(float(0))
    return temporary


def NB_Stratfied_titanic(table):
    randomized = table[:]  # this will randomize the table we passed in
    n = len(table)
    for i in range(n):
        j = randint(0, n - 1)
        randomized[i], randomized[j] = randomized[j], randomized[i]  # changes all the positions of the item in the list

    print randomized
    temporary = titanic_class(randomized)
    print temporary

    k = 10
    empty = [[] for i in range(k)]  # the empty 10-folds
    count = 0

    for i in range(1, 2):
        for j in range(len(temporary)):
            if (temporary[j] == i):
                if count == 10:
                    count = 0
                empty[count].append(randomized[j])
                count += 1
    print len(temporary)/len(empty)
    print len(empty[0])
